# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Deploy to Google Cloud

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PROJECT_ID: $ {{ secrets.GOOGLE_PROJECT }}
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev/$GOOGLE_PROJECT/mission-5
  GKE_CLUSTER: mission-5-cluster
  GKE_ZONE: us-central1-c
  IMAGE_NAME: mission5-backend
  TAG: latest

# env:
#   PROJECT_ID: ${{ secrets.GOOGLE_PROJECT }}
#   GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
#   GKE_CLUSTER: mission-5-cluster # TODO: update to cluster name
#   GKE_ZONE: us-central1-c # TODO: update to cluster zone
#   DEPLOYMENT_NAME: mission-5 # TODO: update to deployment name
#   REPOSITORY:  mission-5 # TODO: update to Artifact Registry docker repository
#   IMAGE: mission5-backend
  
jobs:
  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
    
  # This workflow contains a two jobs, one called "build_test" and a second called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    steps:
      # Steps represent a sequence of tasks that will be executed as part of the job
      - name: code checkout
        uses: actions/checkout@v4

      - id: "auth"
        uses: google-github-actions/auth@v1
        with:
            credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with: 
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS}}
          export_default_credentials: true

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: docker build -t us-central1-docker.pkg.dev/$GOOGLE_PROJECT/mission-5/mission5-backend:latest .

      - name: Push Docker image to Artifact Registry
        run: docker push us-central1-docker.pkg.dev/$GOOGLE_PROJECT/mission-5/mission5-backend:latest

      - name: Deploy to GKE
        run: |-
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.REGION }}
       


          

      # - name: Build image
      #   run: docker build . --file mission-5/backend/Dockerfile --tag ${{ env.GAR_LOCATION }}
      #   working-directory: mission-5

      # - name: Push image
      #   run: docker push ${{ env.GAR_LOCATION }}

      # - name: Build and push Docker image
      #   env:
      #     PROJECT_ID: ${{ secrets.GOOGLE_PROJECT }}
      #     REGISTRY: us-central1-docker.pkg.dev
      #     IMAGE_NAME: mission5-backend
      #     TAG: latest
      #     SA_KEY: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      #   run: |
      #     echo -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > /tmp/gcp-key.json
      #     docker login -u _json_key --password-stdin https://$REGISTRY < /tmp/gcp-key.json
      #     docker buildx create --use
      #     docker buildx build --platform linux/amd64,linux/arm64 -t $REGISTRY/$PROJECT_ID/$IMAGE_NAME:$TAG .
      #     docker push $REGISTRY/$PROJECT_ID/$IMAGE_NAME:$TAG

      # - name: build and push the docker image
      #   env:
      #     GOOGLE_PROJECT: $ {{ secrets.GOOGLE_PROJECT }}
      #   run: |
      #     cd backend
      #     gcloud auth configure-docker us-central1-docker.pkg.dev

      
      # - name: Take Docker image and push to Google Artifact Registry
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: |
      #       us-central1-docker.pkg.dev/$GOOGLE_PROJECT/mission-5/mission5-backend:latest
      #       us-central1-docker.pkg.dev/$GOOGLE_PROJECT/mission-5/mission5-backend:latest


